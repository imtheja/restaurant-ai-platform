services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: restaurant_ai_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-restaurant_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      POSTGRES_DB: ${POSTGRES_DB:-restaurant_ai_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/shared/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-restaurant_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: restaurant_ai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend services are run directly with Python in development
  # Uncomment these sections if you want to run backend services in Docker instead

  # API Gateway / Load Balancer
  nginx:
    image: nginx:alpine
    container_name: restaurant_ai_nginx
    ports:
      - "8000:80"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/default.conf:/etc/nginx/conf.d/default.conf
    restart: unless-stopped

  # Frontend is run directly with npm in development
  # Uncomment this section if you want to run frontend in Docker instead

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: restaurant_ai_network